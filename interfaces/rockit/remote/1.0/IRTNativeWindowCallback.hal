/*
 * Copyright 2018 Rockchip Electronics Co. LTD
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author: rimon.xu@rock-chips.com
 *   Date: 2019/06/17
 */

package rockchip.hardware.rockit@1.0;

/**
 * Entry point for Rockit HAL.
 */
interface IRTNativeWindowCallback {
    setCrop(
        Bytes       nativeWindow,
        int32_t     left,
        int32_t     top,
        int32_t     right,
        int32_t     bottom)
    generates(
        Status      status
    );

    setBufferCount(
        Bytes       nativeWindow,
        int32_t     bufferCount)
    generates(
        Status      status
    );

    apiDisconnect(
        Bytes       nativeWindow,
        int32_t     mode)
    generates(
        Status      status
    );

    apiConnect(
        Bytes       nativeWindow,
        int32_t     mode)
    generates(
        Status      status
    );

    setScalingMode(
        Bytes       nativeWindow,
        int32_t     mode)
    generates(
        Status      status
    );

    setUsage(
        Bytes       nativeWindow,
        int32_t     usage)
    generates(
        Status      status
    );

    query(
        Bytes       nativeWindow,
        int32_t     cmd)
    generates(
        Status      status,
        int32_t     param
    );

    setBuffersGeometry(
        Bytes       nativeWindow,
        int32_t     width,
        int32_t     height,
        int32_t     format)
    generates(
        Status      status
    );

    dequeueBufferAndWait(
        Bytes       nativeWindow)
    generates(
        Status      status,
        Bytes       info
    );

    queueBuffer(
        Bytes       nativeWindow,
        Bytes       buf,
        int32_t     fence)
    generates(
        Status      status
    );

    dequeueBuffer(
        Bytes       nativeWindow)
    generates(
        Status      status,
        Bytes       buf
    );

    cancelBuffer(
        Bytes       nativeWindow,
        Bytes       info,
        int32_t     fence)
    generates(
        Status      status
    );

    setSwapInterval(
        Bytes       nativeWindow,
        int32_t     isInterval)
    generates(
        Status      status
    );

    setDataSpace(
        Bytes       nativeWindow,
        int32_t     dataSpace)
    generates(
        Status      status
    );

    setTransform(
        Bytes       nativeWindow,
        int32_t     transform)
    generates(
        Status      status
    );
};

