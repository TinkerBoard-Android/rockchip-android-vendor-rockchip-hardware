/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package rockchip.hardware.rockit@1.0;

import android.hidl.safe_union@1.0::Monostate;

typedef vec<uint8_t> Bytes;

enum Status : int32_t {
    /** Operation completed successfully. */
    OK        = 0,

    // bad input

    /** Argument has invalid value (user error). */
    BAD_VALUE = -22,
    /** Argument uses invalid index (user error). */
    BAD_INDEX = -75,
    /** Argument/Index is valid but not possible. */
    CANNOT_DO = -2147483646,

    // bad sequencing of events

    /** Object already exists. */
    DUPLICATE = -17,
    /** Object not found. */
    NOT_FOUND = -2,
    /** Operation is not permitted in the current state. */
    BAD_STATE = -38,
    /** Operation would block but blocking is not permitted. */
    BLOCKING  = -9930,

    // bad environment

    /** Not enough memory to complete operation. */
    NO_MEMORY = -12,
    /** Missing permission to complete operation. */
    REFUSED   = -1,

    /** Operation did not complete within timeout. */
    TIMED_OUT = -110,

    // missing functionality

    /** Operation is not implemented/supported (optional only). */
    OMITTED   = -74,

    // unknown fatal

    /** Some unexpected error prevented the operation. */
    CORRUPTED = -2147483648,

    // uninitialized

    /** Status has not been initialized. */
    NO_INIT   = -19,
};

enum MediaPlayerSeekMode : uint32_t {
    SEEK_PREVIOUS_SYNC = 0,
    SEEK_NEXT_SYNC = 1,
    SEEK_CLOSEST_SYNC = 2,
    SEEK_CLOSEST = 3,
    SEEK_FRAME_INDEX = 4,
    SEEK = 8,
    NONBLOCKING = 16
};

enum player_type : uint32_t {
    STAGEFRIGHT_PLAYER = 3,
    NU_PLAYER = 4,
    // Test players are available only in the 'test' and 'eng' builds.
    // The shared library with the test player is passed passed as an
    // argument to the 'test:' url in the setDataSource call.
    TEST_PLAYER = 5,
    ROCKIT_PLAYER = 6,
};

struct AudioPlaybackRate {
    float   mSpeed;
    float   mPitch;
    int32_t mStretchMode;
    int32_t mFallbackMode;
};

struct RockitInvokeEvent {
    int32_t      event;
    vec<int32_t> data;
};

struct InvokeTrackInfo {
    int32_t  codecType;
    int32_t  codecID;

    /* video track features */
    int32_t  width;
    int32_t  height;
    float    frameRate;

    /* audio track features */
    int64_t  channelLayout;
    int32_t  channels;
    int32_t  sampleRate;

    /* subtitle track features */

    /* language */
    string lang;

    string mine;
};

struct NotifyTimeTextInfo {
    int64_t startTime;
    int32_t size;
    string  text;
};

typedef vec<InvokeTrackInfo> TracksInfoVec;

struct RockitInvokeReply {
    int32_t event;

    /* vec<InvokeTrackInfo> can't using in union */
    TracksInfoVec tracks;
};

